import { ensureExists } from 'src/utils';
import { T } from 'src';

export const languages = [
  { code: 'bg', display: 'Bulgarian' },
  { code: 'br', display: 'Breton' },
  { code: 'ca', display: 'Catalan' },
  { code: 'ca-valencia', display: 'Catalan (Valencian)' },
  { code: 'cs', display: 'Czech' },
  { code: 'da', display: 'Danish' },
  { code: 'de', display: 'German' },
  { code: 'de-AT', display: 'Austrian German' },
  { code: 'de-CH', display: 'Swiss High German' },
  { code: 'el', display: 'Greek' },
  { code: 'el-polyton', display: 'Greek (Polytonic)' },
  { code: 'en', display: 'English' },
  { code: 'en-AU', display: 'Australian English' },
  { code: 'en-CA', display: 'Canadian English' },
  { code: 'en-GB', display: 'British English' },
  { code: 'en-ZA', display: 'English (South Africa)' },
  { code: 'eo', display: 'Esperanto' },
  { code: 'es', display: 'Spanish' },
  { code: 'es-AR', display: 'Spanish (Argentina)' },
  { code: 'es-BO', display: 'Spanish (Bolivia)' },
  { code: 'es-CL', display: 'Spanish (Chile)' },
  { code: 'es-CO', display: 'Spanish (Colombia)' },
  { code: 'es-CR', display: 'Spanish (Costa Rica)' },
  { code: 'es-CU', display: 'Spanish (Cuba)' },
  { code: 'es-DO', display: 'Spanish (Dominican Republic)' },
  { code: 'es-EC', display: 'Spanish (Ecuador)' },
  { code: 'es-GT', display: 'Spanish (Guatemala)' },
  { code: 'es-HN', display: 'Spanish (Honduras)' },
  { code: 'es-MX', display: 'Mexican Spanish' },
  { code: 'es-NI', display: 'Spanish (Nicaragua)' },
  { code: 'es-PA', display: 'Spanish (Panama)' },
  { code: 'es-PE', display: 'Spanish (Peru)' },
  { code: 'es-PH', display: 'Spanish (Philippines)' },
  { code: 'es-PR', display: 'Spanish (Puerto Rico)' },
  { code: 'es-PY', display: 'Spanish (Paraguay)' },
  { code: 'es-SV', display: 'Spanish (El Salvador)' },
  { code: 'es-US', display: 'Spanish (United States)' },
  { code: 'es-UY', display: 'Spanish (Uruguay)' },
  { code: 'es-VE', display: 'Spanish (Venezuela)' },
  { code: 'et', display: 'Estonian' },
  { code: 'eu', display: 'Basque' },
  { code: 'fa', display: 'Persian' },
  { code: 'fo', display: 'Faroese' },
  { code: 'fr', display: 'French' },
  { code: 'fur', display: 'Friulian' },
  { code: 'fy', display: 'Western Frisian' },
  { code: 'ga', display: 'Irish' },
  { code: 'gd', display: 'Scottish Gaelic' },
  { code: 'gl', display: 'Galician' },
  { code: 'he', display: 'Hebrew' },
  { code: 'hr', display: 'Croatian' },
  { code: 'hu', display: 'Hungarian' },
  { code: 'hy', display: 'Armenian' },
  { code: 'hyw', display: 'hyw' },
  { code: 'ia', display: 'Interlingua' },
  { code: 'ie', display: 'Interlingue' },
  { code: 'is', display: 'Icelandic' },
  { code: 'it', display: 'Italian' },
  { code: 'ka', display: 'Georgian' },
  { code: 'ko', display: 'Korean' },
  { code: 'la', display: 'Latin' },
  { code: 'lb', display: 'Luxembourgish' },
  { code: 'lt', display: 'Lithuanian' },
  { code: 'ltg', display: 'Latgalian' },
  { code: 'lv', display: 'Latvian' },
  { code: 'mk', display: 'Macedonian' },
  { code: 'mn', display: 'Mongolian' },
  { code: 'nb', display: 'Norwegian Bokm√•l' },
  { code: 'nds', display: 'Low German' },
  { code: 'ne', display: 'Nepali' },
  { code: 'nl', display: 'Dutch' },
  { code: 'nn', display: 'Norwegian Nynorsk' },
  { code: 'oc', display: 'Occitan' },
  { code: 'pl', display: 'Polish' },
  { code: 'pt', display: 'Portuguese' },
  { code: 'pt-PT', display: 'European Portuguese' },
  { code: 'ro', display: 'Romanian' },
  { code: 'ru', display: 'Russian' },
  { code: 'rw', display: 'Kinyarwanda' },
  { code: 'sk', display: 'Slovak' },
  { code: 'sl', display: 'Slovenian' },
  { code: 'sr', display: 'Serbian' },
  { code: 'sr-Latn', display: 'Serbian (Latin)' },
  { code: 'sv', display: 'Swedish' },
  { code: 'sv-FI', display: 'Swedish (Finland)' },
  { code: 'tk', display: 'Turkmen' },
  { code: 'tlh', display: 'Klingon' },
  { code: 'tlh-Latn', display: 'Klingon (Latin)' },
  { code: 'tr', display: 'Turkish' },
  { code: 'uk', display: 'Ukrainian' },
  { code: 'vi', display: 'Vietnamese' },
];

let byCode: Map<string, T.Language> | void;

export function getLanguageByCode(code: string): T.Language {
  if (!byCode) {
    byCode = new Map();
    for (const language of languages) {
      byCode.set(language.code, language);
    }
  }

  return ensureExists(byCode.get(code), 'Code does not exist');
}
